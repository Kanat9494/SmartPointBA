@page "/"
@using MudBlazor
@inject NavigationManager UriHelper


<style>
    #is-home-active {
        color: #00cc00 !important;
    }

    #is-account-active {
        color: #323232 !important;
    }

    .search-bar {
        background: #00cc00;
        height: 55px;
        margin: 0;
        display: flex;
        align-items: center;
    }

    .search-input {
        height: 40px;
        border-radius: 10px;
        margin: auto 5px;
        padding: 10px;
        width: 75%;
        border: none;
        outline: none;
    }

    .search-icon {
        margin: auto 0;
        display: flex;
        align-items: center;
    }

    .categories-container {
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
        margin-top: 50px;
        scrollbar-width: thin; /* Устанавливает ширину полосы прокрутки */
        scrollbar-color: transparent transparent; /* Устанавливает прозрачный цвет полосы прокрутки */
    }

    .popular-products-container {
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
        height: 150px;
        scrollbar-width: thin; /* Устанавливает ширину полосы прокрутки */
        scrollbar-color: transparent transparent; /* Устанавливает прозрачный цвет полосы прокрутки */
        display: flex;
    }

    .scrollable-content {
        display: inline-block;
        border-radius: 10px;
        background-color: #F5E1E9;
        padding: 8px;
    }

    .categories-container::-webkit-scrollbar {
        width: 0.5rem; /* Ширина полосы прокрутки */
    }

    .categories-container::-webkit-scrollbar-thumb {
        background-color: transparent; /* Цвет фона полосы прокрутки */
    }

    .popular-products-container::-webkit-scrollbar {
        width: 0.5rem; /* Ширина полосы прокрутки */
    }

    .popular-products-container::-webkit-scrollbar-thumb {
        background-color: transparent; /* Цвет фона полосы прокрутки */
    }





    .popular-products-item {
        margin: 0 3px;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .popular-products-image {
        width: 100px;
        height: 10px;
        border: 1px solid transparent;
    }

        .popular-products-image img {
            height: 50px;
            width: 50px;
            border-radius: 50%;
            object-fit: cover;
        }

    .popular-products-name {
        margin-top: 5px;
        font-family: 'Open Sans Regular', sans-serif;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

<div class="search-bar fixed-top">
    <input type="text" placeholder="Поиск..." class="search-input" @bind-value="SearchInputValue">
    @*<MudTextField @bind-value="SearchInputValue" Label="" Variant="Variant.Text"></MudTextField>*@

    <button class="search-icon"><i class="material-icons" style="font-size: 2.5em; color: white">search</i></button>
    <img width="30" height="30" src="images/icons/second_white_bell_icon.png" class="ml-2"/>
</div>

<div class="mx-3 categories-container">
    @*<div>
        @for (int i = 0; i < Categories.Count; i++)
        {
            <p>@Categories[i].CategoryName</p>
        }
    </div>*@
    @for (int i = 0; i < Categories.Count; i++)
    {
        <div class="scrollable-content mr-3 my-2">
            @Categories[i].CategoryName
        </div>
    }
</div>

<div class="mx-3" style="display: flex; justify-content: space-between; white-space: nowrap">
    <h5 style="flex: 0;">Самые популярные товары</h5>
    <h5 style="flex: 0;">Все</h5>
</div>

<div class="mx-3 popular-products-container">
    @for (int i = 0; i < PopularProducts.Count; i++)
    {
        <div class="popular-products-item">
            <div class="popular-products-image">
                <img src="@PopularProducts[i].ImageUrl" alt="@PopularProducts[i].ProductName"/>

                <span>@PopularProducts[i].ProductName</span>
            </div>
            @*<img src="@PopularProducts[i].ImageUrl" height="50" width="50"/>*@

            @*<div class="popular-products-name">@PopularProducts[i].ProductName</div>*@
        </div>
    }
</div>


<div class="mx-3" style="display: flex; justify-content: space-between; white-space: nowrap">
    <h5 style="flex: 0;">Скидки, магазины</h5>
    <h5 style="flex: 0;">Все</h5>
</div>

<div class="mx-3">
    @for (int i = 0; i < PopularProducts.Count; i++)
    {
        <div @onclick="SecondPage">
            <div >
                <img src="@PopularProducts[i].ImageUrl" alt="@PopularProducts[i].ProductName" />

                <span>@PopularProducts[i].ProductName</span>
            </div>
            @*<img src="@PopularProducts[i].ImageUrl" height="50" width="50"/>*@

            @*<div class="popular-products-name">@PopularProducts[i].ProductName</div>*@
        </div>
    }
</div>

<div class="mx-3" style="display: flex; justify-content: space-between; white-space: nowrap">
    <h5 style="flex: 0;">Скидки, магазины</h5>
    <h5 style="flex: 0;">Все</h5>
</div>

<div class="mx-3">
    @for (int i = 0; i < PopularProducts.Count; i++)
    {
        <div @onclick="SecondPage">
            <div>
                <img src="@PopularProducts[i].ImageUrl" alt="@PopularProducts[i].ProductName" />

                <span>@PopularProducts[i].ProductName</span>
            </div>
            @*<img src="@PopularProducts[i].ImageUrl" height="50" width="50"/>*@

            @*<div class="popular-products-name">@PopularProducts[i].ProductName</div>*@
        </div>
    }
</div>

@code {
    public string SearchInputValue { get; set; }
    private List<Category> Categories { get; set; }
    private List<PopularProduct> PopularProducts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories = new List<Category>();
        PopularProducts = new List<PopularProduct>();

        await LoadCategories();

        await LoadProducts();
    }

    private async Task LoadCategories()
    {
        try
        {
            Categories = await ContentService.Instance().GetItemsAsync<Category>("api/Categories/LoadCategories");
        }
        catch {}
    }

    private async Task LoadProducts()
    {
        try
        {
            PopularProducts = await ContentService.Instance().GetItemsAsync<PopularProduct>("api/Products/LoadPopularProducts");
        }
        catch {}
    }

    private void SecondPage()
    {
        UriHelper.NavigateTo("counter");
    }
}
